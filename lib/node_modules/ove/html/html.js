function safe_tags_replace(str) {
	return str.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;');
};

function propesc(s) {
	return safe_tags_replace(s).replace(/"/g, '&quot;')
};

exports.apply = function(){
	var scope = this;
	scope.detab = scope.detab4 = function(){
		var r = /([^\t\r\n]{4})|([^\t\r\n]{3})\t|([^\t\r\n]{2})\t|([^\t\r\n])\t|\t/g;
		var m = ['    ','   ','  ', ' ', ''];
		var f = function(_, $1, $2, $3, $4){
			return ($1 || $2 || $3 || $4 || '') + m[($1 || $2 || $3 || $4 || '').length]
		};
		return function(s){return s.replace(r, f)}
	}();
	scope.__lit = safe_tags_replace;
	scope._p = function(s){
		if(s){
			return '<p>' + s + '</p>\n'
		} else {
			return ''
		}
	};
	scope.wrapTag = function(tag, h, b){
		if(arguments.length === 2){
			b = h, h = ''
		};
		b = ((b || '') + '').trim(), h = ((h || '') + '').trim()
		return this.__cons('<' + tag + (h ? ' ' + h : '') + '>', b, '</' + tag +'>')
	};
	scope['<'] = scope.wrapTag;
	scope.defTag = function(tagName, altTag, alth){
		var tag = altTag || tagName;
		var alth = (alth || '') + ' '
		this[tagName] = function(h, b){
			if(arguments.length > 1)
				return this.wrapTag(tag, alth + h, b)
			else
				return this.wrapTag(tag, alth, h)
		}
	};
	scope.defPreTag = function(tagName){
		this[tagName] = function(h, b){
			if(arguments.length > 1)
				return this.wrapTag('pre', h, this.__lit(this.detab(b.trimRight())))
			else
				return this.wrapTag('pre', this.__lit(this.detab(h.trimRight())))
		}
	}

	scope.rowspan = function(n, s){
		return {
			rowSpans: n,
			colSpans: (s && s.colSpans ? s.colSpans : 1),
			inner: s + '',
			toString: function(){
				return this.inner
			}
		}
	}
	scope.colspan = function(n, s){
		return {
			colSpans: n,
			rowSpans: (s && s.colSpans ? s.colSpans : 1),
			inner: s + '',
			toString: function(){
				return this.inner
			}
		}
	}
	var tableLineTag = function(tag){
		return function(_args_){
			var classNames = this.colClasses || []
			var s = '';
			for(var i = 0; i < arguments.length; i++) {
				if(arguments[i] && (arguments[i].rowSpans || arguments[i].colSpans)) {
					s += this.__cons('<' + tag + ' class="' + propesc(classNames[i] || '') + '" rowspan="' + arguments[i].rowSpans + '" colspan="' + arguments[i].colSpans + '">', arguments[i], '</' + tag + '>');
				} else {
					s += this.__cons('<' + tag + ' class="' + propesc(classNames[i] || '') + '">', arguments[i], '</' + tag + '>');
				}
			}
			return '<tr>' + s + '</tr>'
		}
	}
	scope.tr = tableLineTag('td');
	scope.thr = tableLineTag('th');
	scope.table = scope.lazy(function(h, b){
		if(!b) { b = h; h = '' }
		return this.wrapTag("table", (h ? this.force(h) : h), this.callDSL(b));
	});

	scope.defColClasses = function(){
		this.colClasses = [].slice.call(arguments, 0)
	}
	scope._ul = function(){
		var s = '';
		for(var i = 0; i < arguments.length; i++)
			s += arguments[i] + '\n'
		return '<ul>' + s + '</ul>'
	}
	scope._ol = function(){
		var s = '';
		for(var i = 0; i < arguments.length; i++)
			s += arguments[i] + '\n'
		return '<ol>' + s + '</ol>'
	}
	scope._li = function(s){
		return '<li>' + s + '</li>'
	}
	scope.urlPath = function(s){
		return s.replace(/\\/g, '/')
	}
	scope['@'] = function(address, text){
		if(!text) text = address;
		return '<a href="' + address + '">' + text + '</a>'
	}
	scope['&'] = function(id){return '&' + id + ';'}

	scope['inline_`'] = function(s, num){
		return '<code>' + s + '</code>'
	}
	scope['inline_*'] = function(s, num){
		if(num % 2 == 1){return '<em>' + s + '</em>'}
		else return '<strong>' + s + '</strong>'
	}
	scope['inline_~'] = function(s, num){
		if(num % 2 == 1){return '<i>' + s + '</i>'}
		else return '<b>' + s + '</b>'
	}
	require('./html.ed').apply.call(this);
}