var scope = exports.scope = {};
var hljs = require('highlight.js');

var regularizeSourceHTML = function(piece, linenoQ){
	piece = (piece + "\n").replace(/\u001b/g, '\u001bE');
	var oPiece, k = 0;
	do {
		oPiece = piece;
		piece = oPiece.replace(/(<(\w+)[^<>]*>)([^<>]*)(<\/\2>)/g, function(p, left, tag, body, right){
			body = left + body.replace(/\n[ \t]*/g, function(m){return right + m + left}) + right;
			return body.replace(/</g, '\u001bL').replace(/>/g, '\u001bR');
		});
		k++;
	} while(k < 100 && oPiece != piece);
	var t = this;
	var lineno = linenoQ - 1;
	piece = piece
	             .replace(/^([ \t]*)(\S.*)\n/gm, function(m, $1, $2){
	             	return (linenoQ ? '<u>' + (++lineno) + '</u>' : '') + '<b indent="' + (t.detab($1).length) + '">' + '<i>' + $1 + '</i>' + $2 + '<i>\n</i></b>'
	             })
	             .replace(/\u001bL/g, '<')
	             .replace(/\u001bR/g, '>')
	             .replace(/\u001bE/g, '\x1B')
	             .replace(/\u001b/g, '');
	return piece;
}
scope.sourceAfter = function(language, linenoQ, piece){
	if(arguments.length < 3){
		piece = linenoQ;
		linenoQ = false;
	};
	return this['<']('pre', 'class="mghl source ' + language + (linenoQ ? ' lineno' : '') + '"', regularizeSourceHTML.call(this, piece, linenoQ));
}
scope.source = function(language, linenoQ, text){
	if(arguments.length < 3){
		text = linenoQ;
		linenoQ = false;
	};
	return this.sourceAfter(language, linenoQ, hljs.highlight(language, text.trimRight()).value);
}
scope.useLanguage = function(language, alias){
	this[language] = this['source-' + language] = function(linenoQ, s){
		if(arguments.length < 2){
			s = linenoQ;
			linenoQ = false;
		}
		return this.source(language, linenoQ, s)
	}
	if(alias){this[alias] = this['source-' + alias] = this[language]};
	return '';
}

exports.apply = function(){
	this.usePackage('ove/html');
	this.__merge(scope);
	require('./source.ed').apply.call(this);
}