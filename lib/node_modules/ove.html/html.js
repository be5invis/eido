var tagsToReplace = {
    '&': '&amp;',
    '<': '&lt;',
    '>': '&gt;'
};

function replaceTag(tag) {
    return tagsToReplace[tag] || tag;
}

function safe_tags_replace(str) {
    return str.replace(/[&<>]/g, replaceTag)
    	.replace(/[、。！，．：；？…][’”…′″、。〃〉》」』】〕〗〞︶︺︾﹀﹄﹚﹜﹞！＂％＇），．：；？］｀｜｝]*/g, "$&\u200b");
}

function propesc(s) {
	return safe_tags_replace(s).replace(/"/g, '&quot;')
}

var scope = {};
scope.__lit = safe_tags_replace;
scope._p = function(s){
	if(s){
		return '<p>' + s + '</p>\n'
	} else {
		return ''
	}
};
scope.wrapTag = function(tag, h, b){
	if(arguments.length === 2){
		b = h, h = ''
	};
	b = ((b || '') + '').trim(), h = ((h || '') + '').trim()
	return this.__cons('<' + tag + (h ? ' ' + h : '') + '>', b, '</' + tag +'>')
};
scope['<'] = scope.wrapTag;
scope.defTag = function(tagName, altTag, alth){
	var tag = altTag || tagName;
	var alth = (alth || '') + ' '
	this[tagName] = function(h, b){
		if(arguments.length > 1)
			return this.wrapTag(tag, alth + h, b)
		else
			return this.wrapTag(tag, alth, h)
	}
};
scope.defPreTag = function(tagName){
	this[tagName] = function(h, b){
		if(arguments.length > 1)
			return this.wrapTag('pre', h, this.__lit(b.trimRight()))
		else
			return this.wrapTag('pre', this.__lit(h.trimRight()))
	}
}

scope.tr = function(_args_){
	var classNames = this.colClasses || []
	var s = '';
	for(var i = 0; i < arguments.length; i++)
		s += this.__cons('<td class="' + propesc(classNames[i] || '') + '">', arguments[i], '</td>');
	return '<tr>' + s + '</tr>'
}
scope.thr = function(_args_){
	var classNames = this.colClasses || []
	var s = '';
	for(var i = 0; i < arguments.length; i++)
		s += this.__cons('<th class="' + propesc(classNames[i] || '') + '">', arguments[i], '</th>');
	return '<tr>' + s + '</tr>'
}
scope.table = function(h, b){
	if(!b) { b = h; h = '' }
	return this.wrapTag("table", h, this.callDSL(b));
}
scope.table.nByref = 1;
scope.defColClasses = function(){
	this.colClasses = [].slice.call(arguments, 0)
}
scope._ul = function(){
	var s = '';
	for(var i = 0; i < arguments.length; i++)
		s += arguments[i] + '\n'
	return '<ul>' + s + '</ul>'
}
scope._ol = function(){
	var s = '';
	for(var i = 0; i < arguments.length; i++)
		s += arguments[i] + '\n'
	return '<ol>' + s + '</ol>'
}
scope._li = function(s){
	return '<li>' + s + '</li>'
}
scope.urlPath = function(s){
	return s.replace(/\\/g, '/')
}
scope['@'] = function(address, text){
	if(!text) text = address;
	return '<a href="' + address + '">' + text + '</a>'
}
scope['&'] = function(id){return '&' + id + ';'}

scope['inline_`'] = function(s, num){
	return '<code>' + s + '</code>'
}
scope['inline_*'] = function(s, num){
	if(num % 2 == 1){return '<em>' + s + '</em>'}
	else return '<strong>' + s + '</strong>'
}
scope['inline_~'] = function(s, num){
	if(num % 2 == 1){return '<i>' + s + '</i>'}
	else return '<b>' + s + '</b>'
}


exports.apply = function(){
	this.__merge(scope);
	require('./html.ed').apply.call(this);
}